@page
@using DbNetSuiteCore.Enums.DbNetGrid;
@using DbNetSuiteCoreApp.ViewModels;
@using DbNetSuiteCore.Components;
@using DbNetSuiteCore.Enums;
@model SampleModel

@section Title
{
	<p>The @Model.HelpLink("events.htm#OnCellTransform", "OnCellTransform") event can be used to provide a customised way to transform the way in data is presented in a grid cell</p>
}

@section Styles
{
<style>
div.scroll
{
	height:50px;
	width:400px;
	overflow-y:scroll;
}
div.overflow
{
	height:24px;
	width:400px;
	overflow-x:hidden;
}
</style>
}

@section Control
{
	<table class="selection-table">
    <tr>
        <td><b>Text formatting style</b></td>
        <td>
			<select class="form-select" id="noteStyle">
				<option value="Default">Default</option>
				<option value="Characters">Characters</option>
				<option value="Words">Words</option>
				<option value="Scroll">Scroll</option>
				<option value="Overflow">Overflow</option>
			</select>
        </td>
    </tr>
</table>
<hr />
	@{
		DbNetGridCore employeesGrid = new DbNetGridCore("northwind", "employees")
		{
			Columns = new List<string>() { "FirstName", "LastName", "Title", "Notes" }
		};
		employeesGrid.Bind(EventType.OnInitialized, "saveGridReference");
		employeesGrid.Bind(EventType.OnCellTransform, "transformNotes");
		@employeesGrid.Render()
	}
}

@section Scripts
{
<script type="text/javascript" class="source">
$(document).ready( init );

function init()
{
	$("#noteStyle").change(reloadGrid);
}

var employeesGrid = null;
function saveGridReference(sender)
{
	employeesGrid = sender;
}

function reloadGrid() {
	if (employeesGrid)
	{
		employeesGrid.reload();
	}
}
function transformNotes(sender, args)
{
	var $cell = $(args.cell);
	$cell.attr("title", $cell.data("value"));
	switch(args.columnName)
	{
		case "Notes":
			switch ($("#noteStyle").val())
			{
				case "Popup":
					var rowId = cell.parent().attr("datarowindex");
					var a = jQuery("<a/>").attr("href","#").addClass("simple-popup-link").attr("rowId",rowId).text("Show Notes");
					var dialog = jQuery("<div/>").addClass("dialog").attr("rowId",rowId).css("background-color","white").attr("title","Notes");
					var div = jQuery("<div/>").css("background-color","white").html(cell.html()).css("height","200").css("width","300");
					dialog.append(div);	
					$cell.empty().append(a).append(dialog);
					break;
				case "Characters":
					if ($cell.text().length > 40)
					{
						$cell.text($cell.text().substr(0,40) + "...");
					}
					break;
				case "Words":
					if ($cell.text().split(" ").length > 5)
					{
						$cell.text($cell.text().split(" ").slice(0,5).join(" ") + "...");
					}
					break;
				case "Scroll":
					var $div = jQuery("<div/>").addClass("scroll").text($cell.data("value"));
					$cell.empty().append($div);
					break;                                          
				case "Overflow":
					var $div = jQuery("<div/>").addClass("overflow").text($cell.data("value"));
					$cell.empty().append($div);
					break;                                          
			}
			break;   
	}
}
</script>
}

@section Source
	{
	<pre>
	<code class="language-csharp">
DbNetGridCore employeesGrid = new DbNetGridCore("northwind", "employees")
{
	Columns = new List<string>() { "FirstName", "LastName", "Title", "Notes" }
};
employeesGrid.Bind(EventType.OnInitialized, "saveGridReference");
employeesGrid.Bind(EventType.OnCellTransform, "transformNotes");
@@employeesGrid.Render()
		</code>
	</pre>
}