@page
@using DbNetSuiteCoreApp.ViewModels
@using DbNetSuiteCore.Components;
@using DbNetSuiteCore.Enums;
@using DbNetSuiteCore.Utilities
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model BrowseDbModel
<table class="selection-table">
    <tr>
        <td>
            <b>Connections</b>
        </td>
        <td>
            <select class="form-select" id="connection-select">
                @foreach (string connection in Model.Connections)
                {
                    <option value="@connection">@connection</option>
                }
            </select>
        </td>
        <td>&nbsp;</td>
        <td>
            <b>Tables</b>
        </td>
        <td>
            <select class="form-select" id="table-select">
                <option value="">Select a table ...</option>
                @foreach (DbObject schema in Model.Tables)
                {
                    <option value="@schema.QualifiedTableName">@schema.TableName</option>
                }
            </select>
        </td>

        @if (Model.Views.Count > 0)
        {        
            <td>&nbsp;</td>
            <td>
                <b>Views</b>
            </td>
            <td>
                <select class="form-select" id="view-select">
                    <option value="">Select a view ...</option>
                    @foreach (DbObject schema in Model.Views)
                    {
                        <option value="@schema.QualifiedTableName">@schema.TableName</option>
                    }
                </select>
            </td>
        }
    </tr>
</table>

@section Title
{
    <p>This application will allow you to browse a database using any table or view. Try it against your own database by adding a connection string to the <b>appSettings</b> file</p>
}
@section Control
{
    @{
        DbNetGridCore grid = new DbNetGridCore(Model.Db, string.IsNullOrEmpty(Model.View) ? Model.Table : Model.View)
        {
            OptimizeForLargeDataset = true,
            QuickSearch = true,
            View = true
        };
        grid.SetColumnFilter("*");
        grid.SetColumnView("*");
        grid.SetColumnStyle("*", "{white-space:nowrap}");
        @grid.Render()
    }
}

@section Scripts
{
<script type="text/javascript">
var db = "@Model.Db"
var table = "@Model.Table"
var view = "@Model.View"
var views = "@Model.Views.Count"

$(document).ready(init);

function init() {
    $('#connection-select').val(db).change(function(event) { reloadPage(true) });
        $('#table-select').val(table).change(function () {
        $('#view-select').prop("selectedIndex", 0);    
        reloadPage(false);
    });
        $('#view-select').val(view).change(function () {
        $('#table-select').prop("selectedIndex", 0);
        reloadPage(false);
    });
}


function reloadPage(dbChange) {
    var db = $('#connection-select').val();
    var table = dbChange ? '' : $('#table-select').val();
    var view = dbChange || views == 0 ? '' : $('#view-select').val();

    window.location.href = window.location.href.replace(/[\?#].*|$/, "?db=" + db + "&table=" + table + "&view=" + view);
}
</script>
}

@section Source
{
<pre>
    <code class="language-csharp">
DbNetGridCore grid = new DbNetGridCore(Model.Db, Model.TableOrView)
{
    OptimizeForLargeDataset = true,
    QuickSearch = true
};
grid.SetColumnProperty("*", ColumnPropertyType.Filter, true);
grid.SetColumnProperty("*", ColumnPropertyType.Style, "{white-space:nowrap}");
@@grid.Render()
    </code>
</pre>
}
