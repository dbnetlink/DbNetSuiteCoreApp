@page
@using DbNetSuiteCoreApp.ViewModels;
@using DbNetSuiteCore.Components;
@using DbNetSuiteCore.Enums.DbNetGrid;
@using DbNetSuiteCore.Enums;
@model SampleModel

@section Title
{
    <p>Column filters provide a quick and easy way to filter the data by the values in a specified column. To turn on filtering for a column set the @Model.HelpLink("methods.htm#Filter", "Filter") property to true. In addition the column property @Model.HelpLink("methods.htm#FilterMode", "FilterMode") can be set to <b>List</b> or <b>Input</b> which allows the user to either select the filter value from a list of values or to enter a wildcard value as free text in the case of text column and '&gt;', '&lt;', '&gt;=' or '&lt;=' operators in the case of numeric/date columns.</p>
}

@section Control
{
    @{
        DbNetGridCore productsGrid = new DbNetGridCore("northwind", "Products")
        {
            Columns = new List<string>() { "ProductID", "ProductName", "SupplierID", "CategoryID", "QuantityPerUnit", "UnitPrice", "UnitsInStock", "UnitsOnOrder", "ReorderLevel", "Discontinued" },
            Labels = new List<string>() { "ID", "Name", "Supplier", "Category", "Quantity", "Price", "Stock", "On Order", "Reorder Level", "Discontinued" },
            PageSize = 10,
            BooleanDisplayMode = BooleanDisplayMode.Checkbox,
        };
        productsGrid.Column(new String[] { "ProductID", "ProductName", "SupplierID", "CategoryID", "QuantityPerUnit", "UnitPrice", "UnitsInStock", "UnitsOnOrder", "ReorderLevel", "Discontinued" }).Filter();
        productsGrid.Column("SupplierID").Lookup(new Lookup("Suppliers", "SupplierId", "CompanyName"));
        productsGrid.Column("CategoryID").Lookup(new Lookup("Categories", "CategoryId", "CategoryName")).FilterMode(FilterMode.List);
        productsGrid.Column("UnitPrice").Format("c");
        productsGrid.Column("Discontinued").DataType(typeof(Boolean));

        @productsGrid.Render()
    }
}

@section Source {
DbNetGridCore productsGrid = new DbNetGridCore("northwind", "Products")
{
    Columns = new List<string>() { "ProductID", "ProductName", "SupplierID", "CategoryID", "QuantityPerUnit", "UnitPrice", "UnitsInStock", "UnitsOnOrder", "ReorderLevel", "Discontinued" },
    Labels = new List<string>() { "ID", "Name", "Supplier", "Category", "Quantity", "Price", "Stock", "On Order", "Reorder Level", "Discontinued" },
    PageSize = 10,
    BooleanDisplayMode = BooleanDisplayMode.Checkbox,
};
productsGrid.Column(new String[] { "ProductID", "ProductName", "SupplierID", "CategoryID", "QuantityPerUnit", "UnitPrice", "UnitsInStock", "UnitsOnOrder", "ReorderLevel", "Discontinued" }).Filter();
productsGrid.Column("SupplierID").Lookup(new Lookup("Suppliers", "SupplierId", "CompanyName"));
productsGrid.Column("CategoryID").Lookup(new Lookup("Categories", "CategoryId", "CategoryName"));
productsGrid.Column("UnitPrice").Format("c");
productsGrid.Column("CategoryID").FilterMode(FilterMode.List);
productsGrid.Column("Discontinued").DataType(typeof(Boolean));

@@productsGrid.Render()
    }
