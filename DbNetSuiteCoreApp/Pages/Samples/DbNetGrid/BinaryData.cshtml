@page
@using DbNetSuiteCore.Enums.DbNetGrid;
@using DbNetSuiteCoreApp.ViewModels;
@using DbNetSuiteCore.Components;
@using DbNetSuiteCore.Enums;

@model SampleModel

@section Title {
    <p>Binary data can be treated in one of two ways in the grid control. If it is an image then be previewed directly in the browser by setting the column @Model.HelpLink("methods.htm#Image", "Image") property to true or if the binary data should be downloaded in the case of files such as spreadsheets or PDF's then you can set the column @Model.HelpLink("methods.htm#Download", "Download") property to true. In both cases the @Model.HelpLink("events.htm#OnCellDataDownload", "OnCellDataDownload") event can be used to the extension (mime type) and image size in the case of an @Model.HelpLink("methods.htm#Image", "Image") or the file name in the case of a @Model.HelpLink("methods.htm#Download", "Download").</p>
}

@section Markup {
    <div class="source">
        <h5>Preview binary data</h5>
        <hr />
        <div id="imageGrid"></div>
        <br />
        <h5>Download binary data</h5>
        <hr />
        <div id="downloadGrid"></div>
    </div>
}

@section Control {
    @{
        DbNetGridCore employeesGrid = new DbNetGridCore("northwind", "employees", "imageGrid")
        {
            Columns = new List<string>() { "EmployeeId", "FirstName", "LastName", "Title", "Photo", "PhotoPath" },
            PageSize = 5
        };
        employeesGrid.View = true;
        employeesGrid.PageSize = 5;
        employeesGrid.MaxImageHeight = 40;
        employeesGrid.Bind(EventType.OnConfigureBinaryData, "configureImageFileName");
        employeesGrid.SetColumnAsImage("Photo", new ImageConfiguration("jpg"));
        @employeesGrid.Render()

        DbNetGridCore downloadGrid = new DbNetGridCore("northwind", "employees", "downloadGrid")
        {
            Columns = new List<string>() { "EmployeeId", "FirstName", "LastName", "Title", "Photo", "PhotoPath" },
            PageSize = 5
        };
        downloadGrid.SetColumnHidden("EmployeeId");
        downloadGrid.Bind(EventType.OnConfigureBinaryData, "configureImageFileName");
        downloadGrid.SetColumnAsFile("Photo", new FileConfiguration("jpg"));
        @downloadGrid.Render()
    }
}

@section Source {
DbNetGridCore employeesGrid = new DbNetGridCore("northwind", "employees", "imageGrid")
{
    Columns = new List<string>() { "EmployeeId", "FirstName", "LastName", "Title", "Photo", "PhotoPath" },
    PageSize = 5
};
employeesGrid.View = true;
employeesGrid.PageSize = 5;
employeesGrid.MaxImageHeight = 40;
employeesGrid.Bind(DbNetGridEnums.EventType.OnConfigureBinaryData, "configureImageFileName");
employeesGrid.SetColumnAsImage("Photo", new ImageConfiguration("jpg"));

@@employeesGrid.Render()

DbNetGridCore downloadGrid = new DbNetGridCore("northwind", "employees", "downloadGrid")
{
    Columns = new List<string>() { "EmployeeId", "FirstName", "LastName", "Title", "Photo", "PhotoPath" },
    PageSize = 5
};
downloadGrid.SetColumnHidden("EmployeeId");
downloadGrid.SetColumnAsFile("Photo", new FileConfiguration("jpg"));
@@downloadGrid.Render()
}

<script type="text/javascript" class="source">
    function configureImageFileName(sender, args) {
        var fileName = sender.columnValue("photopath", args.row);
        args.fileName = fileName.split('/').pop().replace(".bmp", ".jpg");
    }
</script>